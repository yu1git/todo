＜機能一覧＞
・ToDoアプリ
ユーザーはタスク（ToDo）を作成することができる。
タスクはタイトル、期限日、状態を持つ。
タスクの状態とは、「未着手」赤、「着手中」緑、「完了」灰色の3種類である。
ユーザーはタスクを一覧表示することができる。
ユーザーはタスクのタイトル、期限日、状態を編集することができる。
タスクはフォルダに分類して管理する。
そのため、ユーザーはフォルダを作成することができる必要がある。
また、ユーザーはフォルダの一覧を表示できる必要がある。
ユーザーごとにアカウントを持ち、ログインしたユーザーは自分のフォルダおよびタスクだけを閲覧または編集することができる。
ユーザーはパスワードを忘れた場合には再登録することができる。

＜画面設計＞＜URL設計＞＜テーブル定義＞
https://www.hypertextcandy.com/laravel-tutorial-todo-app-design/

＜作業の流れ＞
routes/web.phpルーティング設定
コントローラークラス作成
$ php artisan make:controller TaskController
コントローラー変更
app/Http/Controllers/TaskController.php
→試し：/folders/1/tasksにアクセス

DBで新しいデータベースを作成

.envデータベース接続設定

マイグレーションファイル作成(複数形)
$ php artisan make:migration create_folders_table --create=folders

マイグレーション変更
/database/migrations/2021_11_30_002103_create_folders_table.php

マイグレーション実行
$ php artisan migrate

モデルクラス作成
$ php artisan make:model Folder

シーダー作成
$ php artisan make:seeder FoldersTableSeeder

シーダー変更
/database/seeds/FoldersTableSeeder.php

シーダー実行
$ composer dump-autoload
$ php artisan db:seed --class=FoldersTableSeeder

コントローラー変更
app/Http/Controllers/TaskController.php

ディレクトリ作成
$ mkdir resources/views/tasks

ファイル作成
resources/views/tasks/index.blade.php

Task モデルにアクセサ(アクセス時にモデルのプロパティの値を変換する処理)を追加する

モデルにリレーションを追加して、コードをきれいに

https://www.hypertextcandy.com/laravel-tutorial-create-folder#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC-1

モデルクラスを永続化、つまりデータベースに書き込む処理
1モデルクラスのインスタンスを作成する。
$folder = new Folder();
2インスタンスのプロパティに値を代入する。
$folder->title = $request->title;
3save メソッドを呼び出す。
$folder->save();

入力値バリデーション
FormRequest クラス
$ php artisan make:request CreateFolder
※FormRequest クラスは基本的に一つのリクエストに対して一つ作成

app/Http/Requests/CreateFolder.php 

エラーメッセージを日本語化する
1日本語メッセージ定義を追加するためのディレクトリ作成
$ mkdir ./resources/lang/jp
2英語版のバリデーションメッセージを定義しているvalidation.phpをjpディレクトリにコピー
$ cp ./resources/lang/en/validation.php ./resources/lang/jp/
3使用するものだけ日本語化
※:attributeが入力欄の名前に置き換わるのでそのままにして、残りを日本語に変更
4日本語版の設定を参照するように config/app.php を編集
'locale' => 'jp', // ★
'fallback_locale' => 'en',
※変更すると、Laravel はメッセージ定義が必要になったときにまず jp ディレクトリを探しに行き、見つからなければ fallback_locale である en のディレクトリにあるファイルを使う
5入力欄の名称をカスタマイズするには、FormRequest クラスに attributes メソッドを追加

入力エラーでフォーム画面に戻ってきたときに入力欄の値を復元
folders/create.blade.php のタイトル入力欄の input 要素に
value="{{ old('title') }}"
を追加。引数は取得したい入力欄のname属性

HTML
・form の action 属性には route 関数
・@csrf
・入力エラーメッセージの表示欄
・入力エラーで戻ってきたときのために value 属性に old 関数

重複する箇所(head 要素や header 要素)はレイアウトファイルにまとめる
resources/views/layout.blade.php
※ページごとに変化する部分は @yield で穴埋め

テンプレートファイルを以下の構造に変える
@extends('layout')

@section('styles')
  <!-- ... -->
@endsection

@section('content')
  <!-- ... -->
@endsection

@section('scripts')
  <!-- ... -->
@endsection



2021/12/10次6、コントローラー